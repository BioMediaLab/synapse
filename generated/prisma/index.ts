// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  activation: (where?: ActivationWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  activation: (where: ActivationWhereUniqueInput) => Activation;
  activations: (
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ActivationNode>;
  activationsConnection: (
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActivationConnection;
  course: (where: CourseWhereUniqueInput) => Course;
  courses: (
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CourseNode>;
  coursesConnection: (
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CourseConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivation: (data: ActivationCreateInput) => Activation;
  updateActivation: (
    args: { data: ActivationUpdateInput; where: ActivationWhereUniqueInput }
  ) => Activation;
  updateManyActivations: (
    args: { data: ActivationUpdateInput; where?: ActivationWhereInput }
  ) => BatchPayload;
  upsertActivation: (
    args: {
      where: ActivationWhereUniqueInput;
      create: ActivationCreateInput;
      update: ActivationUpdateInput;
    }
  ) => Activation;
  deleteActivation: (where: ActivationWhereUniqueInput) => Activation;
  deleteManyActivations: (where?: ActivationWhereInput) => BatchPayload;
  createCourse: (data: CourseCreateInput) => Course;
  updateCourse: (
    args: { data: CourseUpdateInput; where: CourseWhereUniqueInput }
  ) => Course;
  updateManyCourses: (
    args: { data: CourseUpdateInput; where?: CourseWhereInput }
  ) => BatchPayload;
  upsertCourse: (
    args: {
      where: CourseWhereUniqueInput;
      create: CourseCreateInput;
      update: CourseUpdateInput;
    }
  ) => Course;
  deleteCourse: (where: CourseWhereUniqueInput) => Course;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activation: (
    where?: ActivationSubscriptionWhereInput
  ) => ActivationSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "student_id_ASC"
  | "student_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ActivationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activation_code_ASC"
  | "activation_code_DESC"
  | "activatedAt_ASC"
  | "activatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ActivationCreateWithoutCourseInput {
  activation_code: String;
  user?: UserCreateOneWithoutActivationsInput;
  activatedAt: DateTimeInput;
}

export type ActivationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  activation_code?: String;
}>;

export interface CourseUpdateWithoutActivationsDataInput {
  users?: UserUpdateManyWithoutCoursesInput;
  name?: String;
  description?: String;
}

export interface CourseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  activations_every?: ActivationWhereInput;
  activations_some?: ActivationWhereInput;
  activations_none?: ActivationWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CourseWhereInput[] | CourseWhereInput;
  OR?: CourseWhereInput[] | CourseWhereInput;
  NOT?: CourseWhereInput[] | CourseWhereInput;
}

export interface UserCreateWithoutCoursesInput {
  student_id?: Int;
  name: String;
  nickname?: String;
  email: String;
  photo?: String;
  isAdmin?: Boolean;
  activations?: ActivationCreateManyWithoutUserInput;
}

export interface UserUpdateWithoutActivationsDataInput {
  courses?: CourseUpdateManyWithoutUsersInput;
  student_id?: Int;
  name?: String;
  nickname?: String;
  email?: String;
  photo?: String;
  isAdmin?: Boolean;
}

export interface ActivationCreateManyWithoutUserInput {
  create?:
    | ActivationCreateWithoutUserInput[]
    | ActivationCreateWithoutUserInput;
  connect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
}

export interface UserUpdateManyWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput[] | UserCreateWithoutCoursesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCoursesInput[]
    | UserUpdateWithWhereUniqueWithoutCoursesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCoursesInput[]
    | UserUpsertWithWhereUniqueWithoutCoursesInput;
}

export interface ActivationCreateWithoutUserInput {
  activation_code: String;
  course: CourseCreateOneWithoutActivationsInput;
  activatedAt: DateTimeInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  courses_every?: CourseWhereInput;
  courses_some?: CourseWhereInput;
  courses_none?: CourseWhereInput;
  student_id?: Int;
  student_id_not?: Int;
  student_id_in?: Int[] | Int;
  student_id_not_in?: Int[] | Int;
  student_id_lt?: Int;
  student_id_lte?: Int;
  student_id_gt?: Int;
  student_id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  isAdmin?: Boolean;
  isAdmin_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  activations_every?: ActivationWhereInput;
  activations_some?: ActivationWhereInput;
  activations_none?: ActivationWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateOneWithoutActivationsInput {
  create?: UserCreateWithoutActivationsInput;
  connect?: UserWhereUniqueInput;
}

export interface ActivationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivationWhereInput;
  AND?: ActivationSubscriptionWhereInput[] | ActivationSubscriptionWhereInput;
  OR?: ActivationSubscriptionWhereInput[] | ActivationSubscriptionWhereInput;
  NOT?: ActivationSubscriptionWhereInput[] | ActivationSubscriptionWhereInput;
}

export interface UserCreateWithoutActivationsInput {
  courses?: CourseCreateManyWithoutUsersInput;
  student_id?: Int;
  name: String;
  nickname?: String;
  email: String;
  photo?: String;
  isAdmin?: Boolean;
}

export interface UserCreateInput {
  courses?: CourseCreateManyWithoutUsersInput;
  student_id?: Int;
  name: String;
  nickname?: String;
  email: String;
  photo?: String;
  isAdmin?: Boolean;
  activations?: ActivationCreateManyWithoutUserInput;
}

export interface CourseCreateManyWithoutUsersInput {
  create?: CourseCreateWithoutUsersInput[] | CourseCreateWithoutUsersInput;
  connect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
}

export interface CourseCreateInput {
  users?: UserCreateManyWithoutCoursesInput;
  name: String;
  description?: String;
  activations?: ActivationCreateManyWithoutCourseInput;
}

export interface CourseCreateWithoutUsersInput {
  name: String;
  description?: String;
  activations?: ActivationCreateManyWithoutCourseInput;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActivationCreateManyWithoutCourseInput {
  create?:
    | ActivationCreateWithoutCourseInput[]
    | ActivationCreateWithoutCourseInput;
  connect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
}

export interface ActivationUpsertWithWhereUniqueWithoutCourseInput {
  where: ActivationWhereUniqueInput;
  update: ActivationUpdateWithoutCourseDataInput;
  create: ActivationCreateWithoutCourseInput;
}

export interface CourseUpdateWithWhereUniqueWithoutUsersInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutUsersDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  student_id?: Int;
  email?: String;
}>;

export interface ActivationUpdateInput {
  activation_code?: String;
  course?: CourseUpdateOneRequiredWithoutActivationsInput;
  user?: UserUpdateOneWithoutActivationsInput;
  activatedAt?: DateTimeInput;
}

export interface ActivationUpdateManyWithoutCourseInput {
  create?:
    | ActivationCreateWithoutCourseInput[]
    | ActivationCreateWithoutCourseInput;
  delete?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  connect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  disconnect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  update?:
    | ActivationUpdateWithWhereUniqueWithoutCourseInput[]
    | ActivationUpdateWithWhereUniqueWithoutCourseInput;
  upsert?:
    | ActivationUpsertWithWhereUniqueWithoutCourseInput[]
    | ActivationUpsertWithWhereUniqueWithoutCourseInput;
}

export interface CourseUpdateOneRequiredWithoutActivationsInput {
  create?: CourseCreateWithoutActivationsInput;
  update?: CourseUpdateWithoutActivationsDataInput;
  upsert?: CourseUpsertWithoutActivationsInput;
  connect?: CourseWhereUniqueInput;
}

export interface CourseCreateOneWithoutActivationsInput {
  create?: CourseCreateWithoutActivationsInput;
  connect?: CourseWhereUniqueInput;
}

export interface ActivationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  activation_code?: String;
  activation_code_not?: String;
  activation_code_in?: String[] | String;
  activation_code_not_in?: String[] | String;
  activation_code_lt?: String;
  activation_code_lte?: String;
  activation_code_gt?: String;
  activation_code_gte?: String;
  activation_code_contains?: String;
  activation_code_not_contains?: String;
  activation_code_starts_with?: String;
  activation_code_not_starts_with?: String;
  activation_code_ends_with?: String;
  activation_code_not_ends_with?: String;
  course?: CourseWhereInput;
  user?: UserWhereInput;
  activatedAt?: DateTimeInput;
  activatedAt_not?: DateTimeInput;
  activatedAt_in?: DateTimeInput[] | DateTimeInput;
  activatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  activatedAt_lt?: DateTimeInput;
  activatedAt_lte?: DateTimeInput;
  activatedAt_gt?: DateTimeInput;
  activatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ActivationWhereInput[] | ActivationWhereInput;
  OR?: ActivationWhereInput[] | ActivationWhereInput;
  NOT?: ActivationWhereInput[] | ActivationWhereInput;
}

export interface UserCreateManyWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput[] | UserCreateWithoutCoursesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface CourseUpdateManyWithoutUsersInput {
  create?: CourseCreateWithoutUsersInput[] | CourseCreateWithoutUsersInput;
  delete?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  connect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  disconnect?: CourseWhereUniqueInput[] | CourseWhereUniqueInput;
  update?:
    | CourseUpdateWithWhereUniqueWithoutUsersInput[]
    | CourseUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | CourseUpsertWithWhereUniqueWithoutUsersInput[]
    | CourseUpsertWithWhereUniqueWithoutUsersInput;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CourseWhereInput;
  AND?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  OR?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  NOT?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCoursesDataInput;
}

export interface CourseUpdateInput {
  users?: UserUpdateManyWithoutCoursesInput;
  name?: String;
  description?: String;
  activations?: ActivationUpdateManyWithoutCourseInput;
}

export interface UserUpdateWithoutCoursesDataInput {
  student_id?: Int;
  name?: String;
  nickname?: String;
  email?: String;
  photo?: String;
  isAdmin?: Boolean;
  activations?: ActivationUpdateManyWithoutUserInput;
}

export interface CourseUpsertWithWhereUniqueWithoutUsersInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutUsersDataInput;
  create: CourseCreateWithoutUsersInput;
}

export interface ActivationUpdateManyWithoutUserInput {
  create?:
    | ActivationCreateWithoutUserInput[]
    | ActivationCreateWithoutUserInput;
  delete?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  connect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  disconnect?: ActivationWhereUniqueInput[] | ActivationWhereUniqueInput;
  update?:
    | ActivationUpdateWithWhereUniqueWithoutUserInput[]
    | ActivationUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ActivationUpsertWithWhereUniqueWithoutUserInput[]
    | ActivationUpsertWithWhereUniqueWithoutUserInput;
}

export interface ActivationUpdateWithWhereUniqueWithoutCourseInput {
  where: ActivationWhereUniqueInput;
  data: ActivationUpdateWithoutCourseDataInput;
}

export interface ActivationUpdateWithWhereUniqueWithoutUserInput {
  where: ActivationWhereUniqueInput;
  data: ActivationUpdateWithoutUserDataInput;
}

export interface ActivationCreateInput {
  activation_code: String;
  course: CourseCreateOneWithoutActivationsInput;
  user?: UserCreateOneWithoutActivationsInput;
  activatedAt: DateTimeInput;
}

export interface ActivationUpdateWithoutUserDataInput {
  activation_code?: String;
  course?: CourseUpdateOneRequiredWithoutActivationsInput;
  activatedAt?: DateTimeInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateOneWithoutActivationsInput {
  create?: UserCreateWithoutActivationsInput;
  update?: UserUpdateWithoutActivationsDataInput;
  upsert?: UserUpsertWithoutActivationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CourseUpsertWithoutActivationsInput {
  update: CourseUpdateWithoutActivationsDataInput;
  create: CourseCreateWithoutActivationsInput;
}

export interface UserUpsertWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCoursesDataInput;
  create: UserCreateWithoutCoursesInput;
}

export interface ActivationUpsertWithWhereUniqueWithoutUserInput {
  where: ActivationWhereUniqueInput;
  update: ActivationUpdateWithoutUserDataInput;
  create: ActivationCreateWithoutUserInput;
}

export interface UserUpdateInput {
  courses?: CourseUpdateManyWithoutUsersInput;
  student_id?: Int;
  name?: String;
  nickname?: String;
  email?: String;
  photo?: String;
  isAdmin?: Boolean;
  activations?: ActivationUpdateManyWithoutUserInput;
}

export interface CourseCreateWithoutActivationsInput {
  users?: UserCreateManyWithoutCoursesInput;
  name: String;
  description?: String;
}

export interface CourseUpdateWithoutUsersDataInput {
  name?: String;
  description?: String;
  activations?: ActivationUpdateManyWithoutCourseInput;
}

export interface ActivationUpdateWithoutCourseDataInput {
  activation_code?: String;
  user?: UserUpdateOneWithoutActivationsInput;
  activatedAt?: DateTimeInput;
}

export interface UserUpsertWithoutActivationsInput {
  update: UserUpdateWithoutActivationsDataInput;
  create: UserCreateWithoutActivationsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  student_id?: Int;
  name: String;
  nickname?: String;
  email: String;
  photo?: String;
  isAdmin?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  student_id: () => Promise<Int>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  email: () => Promise<String>;
  photo: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  student_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  student_id?: Int;
  name: String;
  nickname?: String;
  email: String;
  photo?: String;
  isAdmin?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  courses: <T = FragmentableArray<CourseNode>>(
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  student_id: () => Promise<Int>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  email: () => Promise<String>;
  photo: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  activations: <T = FragmentableArray<ActivationNode>>(
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  student_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  activations: <T = Promise<AsyncIterator<ActivationSubscription>>>(
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ActivationEdgeNode {
  cursor: String;
}

export interface ActivationEdge
  extends Promise<ActivationEdgeNode>,
    Fragmentable {
  node: <T = Activation>() => T;
  cursor: () => Promise<String>;
}

export interface ActivationEdgeSubscription
  extends Promise<AsyncIterator<ActivationEdgeNode>>,
    Fragmentable {
  node: <T = ActivationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValuesNode {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CoursePreviousValues
  extends Promise<CoursePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivationConnectionNode {}

export interface ActivationConnection
  extends Promise<ActivationConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ActivationEdgeNode>>() => T;
  aggregate: <T = AggregateActivation>() => T;
}

export interface ActivationConnectionSubscription
  extends Promise<AsyncIterator<ActivationConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivationSubscription>() => T;
}

export interface AggregateCourseNode {
  count: Int;
}

export interface AggregateCourse
  extends Promise<AggregateCourseNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourseNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivationNode {
  id: ID_Output;
  activation_code: String;
  activatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Activation extends Promise<ActivationNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  activation_code: () => Promise<String>;
  course: <T = Course>() => T;
  user: <T = User>() => T;
  activatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActivationSubscription
  extends Promise<AsyncIterator<ActivationNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  activation_code: () => Promise<AsyncIterator<String>>;
  course: <T = CourseSubscription>() => T;
  user: <T = UserSubscription>() => T;
  activatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseConnectionNode {}

export interface CourseConnection
  extends Promise<CourseConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CourseEdgeNode>>() => T;
  aggregate: <T = AggregateCourse>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActivationPreviousValuesNode {
  id: ID_Output;
  activation_code: String;
  activatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActivationPreviousValues
  extends Promise<ActivationPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  activation_code: () => Promise<String>;
  activatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActivationPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivationPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  activation_code: () => Promise<AsyncIterator<String>>;
  activatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivationSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ActivationSubscriptionPayload
  extends Promise<ActivationSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Activation>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivationPreviousValues>() => T;
}

export interface ActivationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivationSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivationPreviousValuesSubscription>() => T;
}

export interface CourseSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CourseSubscriptionPayload
  extends Promise<CourseSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Course>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValues>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CourseNode {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Course extends Promise<CourseNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  users: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  activations: <T = FragmentableArray<ActivationNode>>(
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<CourseNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  activations: <T = Promise<AsyncIterator<ActivationSubscription>>>(
    args?: {
      where?: ActivationWhereInput;
      orderBy?: ActivationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateActivationNode {
  count: Int;
}

export interface AggregateActivation
  extends Promise<AggregateActivationNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivationSubscription
  extends Promise<AsyncIterator<AggregateActivationNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseEdgeNode {
  cursor: String;
}

export interface CourseEdge extends Promise<CourseEdgeNode>, Fragmentable {
  node: <T = Course>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdgeNode>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `https://us1.prisma.sh/andy-kay-d8cdc8/synapse/dev`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
