# import * from './../../generated/schema/prisma.graphql'

type Query {
  users: [String]
  user(where: UserWhereUniqueInput!): User
  userSearch(
    name: String
    email: String
    course_id: String
    filter_course_id: String
  ): [User]!
  me: User
  googleUri(email: String!): String!
  confirmSignupGoogle(token: String!): Session!
  courses: [Course]!
  course(where: CourseWhereUniqueInput!, userFirst: Int, userLast: Int): Course
  recentNotifications(start: Int, read: Boolean): RecentNotification
  reminders: [Reminder]
}

type Mutation {
  createCourse(name: String!, description: String): Course
  editCourse(name: String, description: String): Course
  addUsersToCourse(user_ids: [String]!, course_id: String!): Course
  removeUsersFromCourse(user_ids: [String]!, course_id: String!): Course
  updateCourseDescription(description: String, course_id: String!): Course
  deleteCourse(id: String!): Course
  promoteUser(id: String!, admin: Boolean): User
  deleteUser(id: String!): User
  readNotification(note_read_id: String!): MessageRead
  readAllNotifications: UpdateManyResult!
  createCourseMessage(course_id: String!, body: String!): CourseMessage
  createReminder(msg: String!, triggerTime: String!): Reminder
  deleteReminder(id: String!): Reminder
  createContent(
    name: String!
    type: String!
    url: String!
    course_id: String!
    description: String
  ): ContentPiece
  createUnit(name: String, items: [String!]!, description: String): CourseUnit
}

type Subscription {
  notification: UserNotificaiton
}

type Session {
  firstLogin: Boolean
  jwt: String!
}

type UserNotificaiton {
  notification: Notification!
  readRecordId: String!
  read: Boolean!
}

type RecentNotification {
  total: Int!
  notificationRecords: [UserNotificaiton!]!
}

type UpdateManyResult {
  count: Int!
}
