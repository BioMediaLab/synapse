/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 * 
 * For better typings, you should provide configuration for how to lookup 
 * the types. See the documentation for "typegenAutoConfig"
 */
import * as ctx from "../context"
import * as prisma from "./prisma-client/index"

declare global {
  interface GraphQLNexusGen extends GraphQLNexusGenTypes {}
}

// Maybe Promise
export type MaybePromise<T> = T | PromiseLike<T>;

// Maybe Promise List
export type MaybePromiseList<T> = Array<MaybePromise<T>>;

// Maybe Thunk
export type MaybeThunk<T> = T | (() => T);

// Maybe Thunk, with args
export type MaybeThunkArgs<T, A> = T | ((args?: A) => T);

export type QueryUserReturnType = null | User_ReturnType;

export interface QueryUserArgs {
  where: UserWhereUniqueInput;
}

export type QueryUsersReturnType = MaybePromiseList<User_ReturnType>;

export type Query_ReturnType = {};

export interface UserWhereUniqueInput {
  email?: null | string;
  id?: null | string;
}

export type UserAcceptsEmailsReturnType = null | boolean;

export type UserBioReturnType = null | string;

export type UserCreatedAtReturnType = unknown;

export type UserEmailReturnType = string;

export type UserHasVisitedReturnType = null | boolean;

export type UserIClickerIDReturnType = null | string;

export type UserIdReturnType = string;

export type UserIsAdminReturnType = null | boolean;

export type UserNameReturnType = string;

export type UserNicknameReturnType = null | string;

export type UserPhotoReturnType = null | string;

export type UserStudentIdReturnType = null | number;

export type UserUpdatedAtReturnType = unknown;

export type UserRootType = prisma.User;

export type User_ReturnType = prisma.User

export interface GraphQLNexusGenArgTypes {
  Query: {
    user: QueryUserArgs;
  };
}

export interface GraphQLNexusGenRootTypes {
  Query: {};
  User: UserRootType;
}

export interface GraphQLNexusGenReturnTypes {
  Query: {
    user: QueryUserReturnType;
    users: QueryUsersReturnType;
  };
  User: {
    acceptsEmails: UserAcceptsEmailsReturnType;
    bio: UserBioReturnType;
    createdAt: UserCreatedAtReturnType;
    email: UserEmailReturnType;
    hasVisited: UserHasVisitedReturnType;
    iClickerID: UserIClickerIDReturnType;
    id: UserIdReturnType;
    isAdmin: UserIsAdminReturnType;
    name: UserNameReturnType;
    nickname: UserNicknameReturnType;
    photo: UserPhotoReturnType;
    student_id: UserStudentIdReturnType;
    updatedAt: UserUpdatedAtReturnType;
  };
}

export interface GraphQLNexusGenTypes {
  argTypes: GraphQLNexusGenArgTypes;
  backingTypes: GraphQLNexusGenRootTypes;
  returnTypes: GraphQLNexusGenReturnTypes;
  context: ctx.Context;
  enums: {};
  objects: {
    Query: {};
    User: UserRootType;
  };
  interfaces: {};
  unions: {};
  scalars: {
    String: any;
    ID: any;
    Boolean: any;
    DateTime: any;
    Int: any;
  };
  inputObjects: {
    UserWhereUniqueInput: UserWhereUniqueInput;
  };
  allInputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['objects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['unions'], string>
    | Extract<keyof GraphQLNexusGenTypes['interfaces'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
}

export type Gen = GraphQLNexusGenTypes;
