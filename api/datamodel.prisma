type User {
  id: ID! @unique
  courseRoles: [CourseUser!]! @relation(name: "UserCourseRoles")
  student_id: Int
  name: String!
  nickname: String
  email: String! @unique
  photo: String
  iClickerID: String
  bio: String
  isAdmin: Boolean @default(value: "false")
  createdAt: DateTime!
  updatedAt: DateTime!
  activations: [Activation!]!
  notifications: [Notification!]! @relation(name: "UserNotifications")
}

type Course {
  id: ID! @unique
  userRoles: [CourseUser!]! @relation(name: "CourseMembers")
  name: String!
  title: String
  description: String
  activations: [Activation!]!
  term: String
  units: [CourseUnit!]!
  files: [ContentPiece!]! @relation(name: "CourseContent")
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CourseRoleType {
  STUDENT
  PROFESSOR
  ASSISTANT
  ADMIN
  AUDITOR
}

# linking table
type CourseUser {
  id: ID! @unique
  user_type: CourseRoleType!
  course: Course! @relation(name: "CourseMembers")
  user: User! @relation(name: "UserCourseRoles")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Activation {
  id: ID! @unique
  activation_code: String! @unique
  course: Course!
  user: CourseUser
  activatedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageRead {
  id: ID! @unique
  user: User!
  read: Boolean @default(value: "false")
  updatedAt: DateTime!
}

enum TargetType {
  USER
  USERS
  COURSE
  GLOBAL
}

type MessageTarget {
  id: ID! @unique
  type: TargetType!
  user: User @relation(name: "MessageTargetUser")
  users: [User!]! @relation(name: "MessageTargetManyUsers")
  course: Course @relation(name: "MessageTargetCourse")
  reads: [MessageRead!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum NotificationType {
  INFORMATIVE
  NEW_COURSE
  SYSTEM_ALERT
  COURSE_ANNOUNCEMENT
}

type Notification {
  id: ID! @unique
  notify_type: NotificationType! @default(value: "INFORMATIVE")
  target: MessageTarget!
  msg: String
  add_data: Json
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Reminder {
  id: ID! @unique
  msg: String!
  target: MessageTarget
  add_data: Json
  triggerTime: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseMessage {
  id: ID! @unique
  course: Course!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContentPiece {
  id: ID! @unique
  creator: User!
  course: Course! @relation(name: "CourseContent")
  name: String!
  description: String
  type: String!
  url: String!
  forUnits: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseUnit {
  id: ID! @unique
  course: Course!
  name: String!
  description: String!
  items: [ContentPiece!]!
  visible: Boolean @default(value: false)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuestionBlock {
  id: ID! @unique
  blockName: String!
  blockType: blockType!
  questions: [QuestionLink!]!
  course: Course!
  instructions: String
  testId: String # Assignment! once that is set up (for when quiz is graded)
  tag: String
  order: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum blockType {
  OFFLINE
  ONLINE # also = CARLA
  PRACTICE
  CORRECTION
  MAKEUP
  SURVEY
  EVENTS
}

# linking table
type QuestionLink {
  id: ID! @unique
  block: QuestionBlock! # relationship to block
  question: Question! # relationship to question
  points: Int
  position: Int
}

type Question {
  id: ID! @unique
  questionText: String!
  type: QuestionType!
  answerChoices: [QuestionChoice!]! # [QuestionChoice]! no work
  link: [QuestionLink!]!
  mediaFile: ContentPiece
  bloomLevel: String
  feedback: String
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY_QUESTION
  STUDY_QUESTION
  MULTI_CHECK
}

type QuestionChoice {
  id: ID! @unique
  answerText: String!
  question: Question!
  mediaFile: ContentPiece
  position: Int
  points: Int
  correct: Boolean
  feedback: String
}

type StudentAnswer { # ori test_errors
  id: ID! @unique
  student: User!
  block: QuestionBlock!
  question: Question!
  choice: QuestionChoice
  textResponse: String
  points: Int
  tag: Int
  feedback: String
  createdAt: DateTime! # to track when quiz and answers started
  updatedAt: DateTime!
}
